/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/client-metadata.json": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Default Response */
        200: {
          headers: Record<string, unknown>;
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/entry/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description ObjectId of the media entry */
          id: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Default Response */
        200: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["def-6"];
          };
        };
        /** @description Default Response */
        404: {
          headers: Record<string, unknown>;
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/entry/": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["def-9"];
        };
      };
      responses: {
        /** @description Default Response */
        201: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["def-6"];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/oauth/login": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["def-10"];
        };
      };
      responses: {
        /** @description Default Response */
        302: {
          headers: Record<string, unknown>;
          content?: never;
        };
        /** @description Default Response */
        404: {
          headers: Record<string, unknown>;
          content: {
            "application/json": {
              message: string;
            };
          };
        };
        /** @description Default Response */
        422: {
          headers: Record<string, unknown>;
          content: {
            "application/json": {
              message: string;
            };
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/oauth/callback": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Default Response */
        200: {
          headers: Record<string, unknown>;
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/shallow-ping": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Default Response */
        200: {
          headers: Record<string, unknown>;
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    /**
     * Metadata
     * @description Arbitrary metadata
     * @default {}
     */
    "def-0": Record<string, unknown>;
    /** BlobLink */
    "def-1":
      | {
          /**
           * Format: uri
           * @description Hot URL
           */
          url: string;
        }
      | {
          /** @description IPFS CID */
          cid: string;
          /**
           * Format: uri
           * @description IPFS access URL
           */
          accessUrl: string;
        };
    /** HotLinkUrl */
    "def-2": {
      /**
       * Format: uri
       * @description Hot URL
       */
      url: string;
    };
    /** IPFSLink */
    "def-3": {
      /** @description IPFS CID */
      cid: string;
      /**
       * Format: uri
       * @description IPFS access URL
       */
      accessUrl: string;
    };
    /** Index */
    "def-4": {
      /** @description ObjectId of the media index (as hex string) */
      _id: string;
      /** @description The third party host of the media */
      provider?: string;
      /** @description The media type */
      mimeType?: string;
      /** @description Size of the media in bytes */
      size?: number;
      blob: components["schemas"]["def-1"];
      meta: components["schemas"]["def-0"];
    };
    /** Media */
    "def-5": {
      /** @description ObjectId of the media (as hex string) */
      _id: string;
      mirrors: components["schemas"]["def-4"][];
      meta: components["schemas"]["def-0"];
    };
    /** Entry */
    "def-6": {
      /** @description ObjectId of the media entry */
      _id: string;
      title: string;
      author: string;
      localizedTitle?: string;
      slug: string;
      year?: number;
      language?: string;
      thumbnail?:
        | {
            /**
             * Format: uri
             * @description Hot URL
             */
            url: string;
          }
        | {
            /** @description IPFS CID */
            cid: string;
            /**
             * Format: uri
             * @description IPFS access URL
             */
            accessUrl: string;
          };
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      meta: components["schemas"]["def-0"];
      media: components["schemas"]["def-5"][];
      genres: string[];
    };
    /** CreateIndexRequest */
    "def-7": {
      provider?: string;
      mimeType?: string;
      size?: number;
      blob: components["schemas"]["def-1"];
      meta: components["schemas"]["def-0"];
    };
    /** CreateMediaRequest */
    "def-8": {
      meta: components["schemas"]["def-0"];
    } & {
      mirrors: components["schemas"]["def-7"][];
    };
    /** CreateEntryRequest */
    "def-9": {
      title: string;
      author: string;
      localizedTitle?: string;
      year?: number;
      language?: string;
      thumbnail?:
        | {
            /**
             * Format: uri
             * @description Hot URL
             */
            url: string;
          }
        | {
            /** @description IPFS CID */
            cid: string;
            /**
             * Format: uri
             * @description IPFS access URL
             */
            accessUrl: string;
          };
      meta: components["schemas"]["def-0"];
      genres: string[];
    } & {
      media: ({
        meta: components["schemas"]["def-0"];
      } & {
        mirrors: components["schemas"]["def-7"][];
      })[];
    };
    /** LoginRequestSchema */
    "def-10": {
      /** @description User handle. Example: @example.bsky.social */
      handle: string;
    };
    /** LoginResponseSchema */
    "def-11": {
      /** @description JWT token */
      token: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type SchemaDef_0 = components["schemas"]["def-0"];
export type SchemaDef_1 = components["schemas"]["def-1"];
export type SchemaDef_2 = components["schemas"]["def-2"];
export type SchemaDef_3 = components["schemas"]["def-3"];
export type SchemaDef_4 = components["schemas"]["def-4"];
export type SchemaDef_5 = components["schemas"]["def-5"];
export type SchemaDef_6 = components["schemas"]["def-6"];
export type SchemaDef_7 = components["schemas"]["def-7"];
export type SchemaDef_8 = components["schemas"]["def-8"];
export type SchemaDef_9 = components["schemas"]["def-9"];
export type SchemaDef_10 = components["schemas"]["def-10"];
export type SchemaDef_11 = components["schemas"]["def-11"];
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
