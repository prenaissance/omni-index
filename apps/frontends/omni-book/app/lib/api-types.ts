/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/client-metadata.json": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Default Response */
        200: {
          headers: Record<string, unknown>;
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/entries": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: {
          /** @description Page number (1 indexed) */
          page?: number;
          /** @description Page size */
          limit?: number;
          /** @description Filter by author. Case insensitive. */
          author?: string;
          orderBy?: "createdAt" | "updatedAt";
          /** @description Search by title, author or description. */
          search?: string;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Default Response */
        200: {
          headers: Record<string, unknown>;
          content: {
            "application/json": {
              data: components["schemas"]["Entry"][];
              meta: {
                /** @description Total number of items matching the query */
                total: number;
                /** @description Current page number (1 indexed) */
                page: number;
                /** @description Number of items per page */
                limit: number;
              };
            };
          };
        };
      };
    };
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["CreateEntryRequest"];
        };
      };
      responses: {
        /** @description Default Response */
        201: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["Entry"];
          };
        };
        /** @description Default Response */
        409: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["Exception"];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/entries/genres": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Default Response */
        200: {
          headers: Record<string, unknown>;
          content: {
            "application/json": string[];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/entries/{entryId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description ObjectId of the media entry */
          entryId: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Default Response */
        200: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["Entry"];
          };
        };
        /** @description Default Response */
        404: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["Exception"];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description ObjectId of the media entry */
          entryId: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Default Response */
        204: {
          headers: Record<string, unknown>;
          content?: never;
        };
        /** @description Default Response */
        404: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["Exception"];
          };
        };
      };
    };
    options?: never;
    head?: never;
    patch: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description ObjectId of the media entry */
          entryId: string;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["UpdateEntryRequest"];
        };
      };
      responses: {
        /** @description Default Response */
        200: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["Entry"];
          };
        };
        /** @description Default Response */
        404: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["Exception"];
          };
        };
      };
    };
    trace?: never;
  };
  "/api/entries/{entryId}/comments": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: {
          /** @description Page number (1 indexed) */
          page?: number;
          /** @description Page size */
          limit?: number;
        };
        header?: never;
        path: {
          /**
           * @description ObjectId of the media entry
           * @example 5fdedb7c25ab1352eef88f60
           */
          entryId: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Default Response */
        200: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["PaginatedCommentsResponse"];
          };
        };
        /** @description Default Response */
        404: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["Exception"];
          };
        };
      };
    };
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /**
           * @description ObjectId of the media entry
           * @example 5fdedb7c25ab1352eef88f60
           */
          entryId: string;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["CreateCommentRequest"];
        };
      };
      responses: {
        /** @description Default Response */
        201: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["CreateCommentResponse"];
          };
        };
        /** @description Default Response */
        400: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["Exception"];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/entries/{entryId}/comments/{tid}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /**
           * @description ObjectId of the media entry
           * @example 5fdedb7c25ab1352eef88f60
           */
          entryId: string;
          /** @description Comment tid */
          tid: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Default Response */
        200: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["CommentResponse"];
          };
        };
        /** @description Default Response */
        404: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["Exception"];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /**
           * @description ObjectId of the media entry
           * @example 5fdedb7c25ab1352eef88f60
           */
          entryId: string;
          /** @description Comment tid */
          tid: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Default Response */
        200: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["AtprotoDeletionResponse"];
          };
        };
        /** @description Default Response */
        404: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["Exception"];
          };
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/entries/{entryId}/comments/{tid}/like": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /**
           * @description ObjectId of the media entry
           * @example 5fdedb7c25ab1352eef88f60
           */
          entryId: string;
          /** @description Comment tid */
          tid: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Default Response */
        201: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["CommentLikeResponse"];
          };
        };
        /** @description Default Response */
        400: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["Exception"];
          };
        };
        /** @description Default Response */
        404: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["Exception"];
          };
        };
      };
    };
    /** @description Remove a previous like from a comment */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /**
           * @description ObjectId of the media entry
           * @example 5fdedb7c25ab1352eef88f60
           */
          entryId: string;
          /** @description Comment tid */
          tid: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Default Response */
        200: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["AtprotoDeletionResponse"];
          };
        };
        /** @description Default Response */
        404: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["Exception"];
          };
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/entries/{entryId}/media": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /**
           * @description ObjectId of the media entry
           * @example 5fdedb7c25ab1352eef88f60
           */
          entryId: string;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["CreateMediaRequest"][];
        };
      };
      responses: {
        /** @description Default Response */
        201: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["Entry"];
          };
        };
        /** @description Default Response */
        404: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["Exception"];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/entries/{entryId}/media/{mediaId}/{mediaId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /**
           * @description ObjectId of the media entry
           * @example 5fdedb7c25ab1352eef88f60
           */
          entryId: string;
          /**
           * @description ObjectId of the media
           * @example 5fdedb7c25ab1352eef88f60
           */
          mediaId: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Default Response */
        200: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["Entry"];
          };
        };
        /** @description Default Response */
        404: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["Exception"];
          };
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/entries/{entryId}/media/{mediaId}/mirrors": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /**
           * @description ObjectId of the media entry
           * @example 5fdedb7c25ab1352eef88f60
           */
          entryId: string;
          /**
           * @description ObjectId of the media under the entry
           * @example 5fdedb7c25ab1352eef88f60
           */
          mediaId: string;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["CreateIndexRequest"][];
        };
      };
      responses: {
        /** @description Default Response */
        201: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["Entry"];
          };
        };
        /** @description Default Response */
        404: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["Exception"];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/entries/{entryId}/media/{mediaId}/mirrors/{mirrorId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /**
           * @description ObjectId of the media entry
           * @example 5fdedb7c25ab1352eef88f60
           */
          entryId: string;
          /**
           * @description ObjectId of the media under the entry
           * @example 5fdedb7c25ab1352eef88f60
           */
          mediaId: string;
          /**
           * @description ObjectId of the mirror to delete
           * @example 5fdedb7c25ab1352eef88f60
           */
          mirrorId: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Default Response */
        200: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["Entry"];
          };
        };
        /** @description Default Response */
        404: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["Exception"];
          };
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/entries/exports/export": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Default Response */
        200: {
          headers: Record<string, unknown>;
          content: {
            "application/json": {
              /** @example 0.0.1 */
              appVersion: string;
              /** Format: date-time */
              exportedAt: string;
              entries: components["schemas"]["EntryExport"][];
            };
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/entries/sse": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Default Response */
        200: {
          headers: Record<string, unknown>;
          content: {
            "text/event-stream":
              | components["schemas"]["EntryCreatedEvent"]
              | components["schemas"]["EntryUpdatedEvent"]
              | components["schemas"]["EntryDeletedEvent"]
              | components["schemas"]["HeartbeatEvent"];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/events": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: {
          statuses?:
            | ("pending" | "accepted" | "rejected")
            | ("pending" | "accepted" | "rejected")[];
          /** @description Page number (1 indexed) */
          page?: number;
          /** @description Page size */
          limit?: number;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Paginated stored events response */
        200: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["PaginatedStoredEventsResponse"];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/events/{eventId}/status": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /**
           * @description ObjectId of the stored event
           * @example 5fdedb7c25ab1352eef88f60
           */
          eventId: string;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["ChangeStoredEventStatusRequest"];
        };
      };
      responses: {
        /** @description Default Response */
        200: {
          headers: Record<string, unknown>;
          content?: never;
        };
      };
    };
    trace?: never;
  };
  "/api/oauth/login": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["LoginRequestSchema"];
        };
      };
      responses: {
        /** @description Default Response */
        302: {
          headers: Record<string, unknown>;
          content?: never;
        };
        /** @description Default Response */
        404: {
          headers: Record<string, unknown>;
          content: {
            "application/json": {
              message: string;
            };
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/oauth/callback": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query: {
          code: string;
          state: string;
          iss: string;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Default Response */
        200: {
          headers: Record<string, unknown>;
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/oauth/logout": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Default Response */
        200: {
          headers: Record<string, unknown>;
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/peer-nodes": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Retrieves all peer nodes */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Default Response */
        200: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["PeerNodeListResponse"];
          };
        };
      };
    };
    put?: never;
    /**
     * Creates a new peer node
     * @description Creates a new peer node with the specified hostname and trust level
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["CreatePeerNodeRequest"];
        };
      };
      responses: {
        /** @description Default Response */
        201: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["PeerNodeResponse"];
          };
        };
        /** @description Default Response */
        400: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["Exception"];
          };
        };
        /** @description Default Response */
        409: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["Exception"];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/peer-nodes/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /** Deletes a peer node */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /**
           * @description ObjectId of the peer node
           * @example 5fdedb7c25ab1352eef88f60
           */
          id: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Default Response */
        204: {
          headers: Record<string, unknown>;
          content?: never;
        };
        /** @description Default Response */
        404: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["Exception"];
          };
        };
      };
    };
    options?: never;
    head?: never;
    /** Updates a peer node */
    patch: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /**
           * @description ObjectId of the peer node
           * @example 5fdedb7c25ab1352eef88f60
           */
          id: string;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["UpdatePeerNodeRequest"];
        };
      };
      responses: {
        /** @description Default Response */
        200: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["PeerNodeResponse"];
          };
        };
        /** @description Default Response */
        404: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["Exception"];
          };
        };
      };
    };
    trace?: never;
  };
  "/api/peer-nodes/{id}/refresh": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Refreshes the pinned certificate for a peer node */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /**
           * @description ObjectId of the peer node
           * @example 5fdedb7c25ab1352eef88f60
           */
          id: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Default Response */
        200: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["PeerNodeResponse"];
          };
        };
        /** @description Default Response */
        404: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["Exception"];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/profile": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Default Response */
        200: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["ProfileResponse"];
          };
        };
        /** @description Default Response */
        404: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["Exception"];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/shallow-ping": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Default Response */
        200: {
          headers: Record<string, unknown>;
          content: {
            "application/json": "pong";
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    /**
     * Metadata
     * @description Arbitrary metadata
     * @default {}
     */
    Metadata: Record<string, unknown>;
    /** Exception */
    Exception: {
      /** @description Exception message */
      message: string;
      data?: unknown;
    };
    /** PaginationQuery */
    PaginationQuery: {
      /**
       * @description Page number (1 indexed)
       * @default 1
       */
      page: number;
      /**
       * @description Page size
       * @default 10
       */
      limit: number;
    };
    /** AtprotoDeletionResponse */
    AtprotoDeletionResponse: {
      locallyDeleted: boolean;
      atprotoDeleted: boolean;
    };
    /** CreateCommentRequest */
    CreateCommentRequest: {
      text: string;
    };
    /** CreateCommentResponse */
    CreateCommentResponse: {
      entrySlug: string;
      tid: string;
      text: string;
      /** Format: date-time */
      createdAt: string;
    };
    /** CommentResponse */
    CommentResponse: {
      tid: string;
      text: string;
      /** Format: date-time */
      createdAt: string;
      createdBy: {
        did: string;
        displayName?: string;
        /** Format: uri */
        avatarUrl?: string;
      };
      likes: number;
      liked: boolean;
    };
    /** PaginatedCommentsResponse */
    PaginatedCommentsResponse: {
      comments: components["schemas"]["CommentResponse"][];
      total: number;
    };
    /** CommentLikeResponse */
    CommentLikeResponse: {
      /** Format: uri */
      uri: string;
      tid: string;
    };
    /** HeartbeatEvent */
    HeartbeatEvent: {
      /** @enum {string} */
      type: "heartbeat";
    };
    /** BlobLink */
    BlobLink:
      | {
          /**
           * Format: uri
           * @description Hot URL
           */
          url: string;
        }
      | {
          /** @description IPFS CID */
          cid: string;
          /**
           * Format: uri
           * @description IPFS access URL
           */
          accessUrl: string;
        };
    /** HotLinkUrl */
    HotLinkUrl: {
      /**
       * Format: uri
       * @description Hot URL
       */
      url: string;
    };
    /** IPFSLink */
    IPFSLink: {
      /** @description IPFS CID */
      cid: string;
      /**
       * Format: uri
       * @description IPFS access URL
       */
      accessUrl: string;
    };
    /** Index */
    Index: {
      /**
       * @description ObjectId
       * @example 5fdedb7c25ab1352eef88f60
       */
      _id: string;
      /** @description The third party host of the media */
      provider?: string;
      /** @description The media type */
      mimeType?: string;
      /** @description Size of the media in bytes */
      size?: number;
      blob: components["schemas"]["BlobLink"];
      meta: components["schemas"]["Metadata"];
    };
    /** Media */
    Media: {
      /**
       * @description ObjectId of the media
       * @example 5fdedb7c25ab1352eef88f60
       */
      _id: string;
      mirrors: components["schemas"]["Index"][];
      meta: components["schemas"]["Metadata"];
    };
    /** Entry */
    Entry: {
      /**
       * @description ObjectId of the media entry
       * @example 5fdedb7c25ab1352eef88f60
       */
      _id: string;
      title: string;
      description?: string;
      author: string;
      localizedTitle?: string;
      slug: string;
      year?: number;
      language?: string;
      thumbnail?:
        | {
            /**
             * Format: uri
             * @description Hot URL
             */
            url: string;
          }
        | {
            /** @description IPFS CID */
            cid: string;
            /**
             * Format: uri
             * @description IPFS access URL
             */
            accessUrl: string;
          };
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      meta: components["schemas"]["Metadata"];
      media: components["schemas"]["Media"][];
      genres: string[];
    };
    /** PaginatedEntriesRequest */
    PaginatedEntriesRequest: {
      /**
       * @description Page number (1 indexed)
       * @default 1
       */
      page: number;
      /**
       * @description Page size
       * @default 10
       */
      limit: number;
    } & {
      /** @description Filter by author. Case insensitive. */
      author?: string;
      orderBy?: "createdAt" | "updatedAt";
      /** @description Search by title, author or description. */
      search?: string;
    };
    /** CreateIndexRequest */
    CreateIndexRequest: {
      provider?: string;
      mimeType?: string;
      size?: number;
      blob: components["schemas"]["BlobLink"];
      meta: components["schemas"]["Metadata"];
    };
    /** CreateMediaRequest */
    CreateMediaRequest: {
      meta: components["schemas"]["Metadata"];
    } & {
      mirrors: components["schemas"]["CreateIndexRequest"][];
    };
    /** CreateEntryRequest */
    CreateEntryRequest: {
      title: string;
      description?: string;
      author: string;
      localizedTitle?: string;
      year?: number;
      language?: string;
      thumbnail?:
        | {
            /**
             * Format: uri
             * @description Hot URL
             */
            url: string;
          }
        | {
            /** @description IPFS CID */
            cid: string;
            /**
             * Format: uri
             * @description IPFS access URL
             */
            accessUrl: string;
          };
      meta: components["schemas"]["Metadata"];
      genres: string[];
    } & {
      media: ({
        meta: components["schemas"]["Metadata"];
      } & {
        mirrors: components["schemas"]["CreateIndexRequest"][];
      })[];
    };
    /**
     * UpdateEntryRequest
     * @description Partial update of an entry
     */
    UpdateEntryRequest: {
      title?: string;
      description?: string;
      author?: string;
      localizedTitle?: string;
      year?: number;
      language?: string;
      thumbnail?:
        | {
            /**
             * Format: uri
             * @description Hot URL
             */
            url: string;
          }
        | {
            /** @description IPFS CID */
            cid: string;
            /**
             * Format: uri
             * @description IPFS access URL
             */
            accessUrl: string;
          };
      meta?: components["schemas"]["Metadata"];
      genres?: string[];
    } & {
      media?: ({
        meta: components["schemas"]["Metadata"];
      } & {
        mirrors: components["schemas"]["CreateIndexRequest"][];
      })[];
    };
    /** IndexExport */
    IndexExport: {
      /**
       * @description ObjectId
       * @example 5fdedb7c25ab1352eef88f60
       */
      _id: string;
      /** @description The third party host of the media */
      provider?: string;
      /** @description The media type */
      mimeType?: string;
      /** @description Size of the media in bytes */
      size?: number;
      blob: components["schemas"]["BlobLink"];
      meta: components["schemas"]["Metadata"];
    };
    /** MediaExport */
    MediaExport: {
      /**
       * @description ObjectId
       * @example 5fdedb7c25ab1352eef88f60
       */
      _id: string;
      mirrors: components["schemas"]["IndexExport"][];
      meta: components["schemas"]["Metadata"];
    };
    /** EntryExport */
    EntryExport: {
      /**
       * @description ObjectId
       * @example 5fdedb7c25ab1352eef88f60
       */
      _id: string;
      title: string;
      author: string;
      localizedTitle?: string;
      year?: number;
      language?: string;
      thumbnail?:
        | {
            /**
             * Format: uri
             * @description Hot URL
             */
            url: string;
          }
        | {
            /** @description IPFS CID */
            cid: string;
            /**
             * Format: uri
             * @description IPFS access URL
             */
            accessUrl: string;
          };
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      meta: components["schemas"]["Metadata"];
      genres: string[];
      media: components["schemas"]["MediaExport"][];
    };
    /** EntryExportResponse */
    EntryExportResponse: {
      /** @example 0.0.1 */
      appVersion: string;
      /** Format: date-time */
      exportedAt: string;
      entries: components["schemas"]["EntryExport"][];
    };
    /** EntryCreatedEvent */
    EntryCreatedEvent: {
      /**
       * @description ObjectId
       * @example 5fdedb7c25ab1352eef88f60
       */
      id: string;
      /** @enum {string} */
      type: "entry.created";
      payload: {
        entry: {
          /** @description ObjectId of the media entry */
          _id: string;
          title: string;
          description?: string;
          author: string;
          localizedTitle?: string;
          year?: number;
          language?: string;
          thumbnail?:
            | {
                /**
                 * Format: uri
                 * @description Hot URL
                 */
                url: string;
              }
            | {
                /** @description IPFS CID */
                cid: string;
                /**
                 * Format: uri
                 * @description IPFS access URL
                 */
                accessUrl: string;
              };
          /** Format: date-time */
          createdAt: string;
          /** Format: date-time */
          updatedAt: string;
          meta: components["schemas"]["Metadata"];
          genres: string[];
        } & {
          media: components["schemas"]["CreateMediaRequest"][];
        };
      };
    };
    /** EntryUpdatedEvent */
    EntryUpdatedEvent: {
      /**
       * @description ObjectId
       * @example 5fdedb7c25ab1352eef88f60
       */
      id: string;
      /** @enum {string} */
      type: "entry.updated";
      payload: {
        /**
         * @description ObjectId
         * @example 5fdedb7c25ab1352eef88f60
         */
        entryId: string;
        fields: {
          title?: string;
          author?: string;
          genres?: string[];
          localizedTitle?: string;
          thumbnail?: components["schemas"]["BlobLink"];
          /** Format: date-time */
          updatedAt?: string;
          meta?: components["schemas"]["Metadata"];
        };
        deletedMediaIds: string[];
        createdMedia: components["schemas"]["Media"][];
        mediaUpdates: {
          /**
           * @description ObjectId
           * @example 5fdedb7c25ab1352eef88f60
           */
          mediaId: string;
          /** @description Only spec */
          meta?: components["schemas"]["Metadata"];
          createdMirrors: components["schemas"]["Index"][];
          deletedMirrorIds: string[];
        }[];
      };
    };
    /** EntryDeletedEvent */
    EntryDeletedEvent: {
      /**
       * @description ObjectId
       * @example 5fdedb7c25ab1352eef88f60
       */
      id: string;
      /** @enum {string} */
      type: "entry.deleted";
      payload: {
        /**
         * @description ObjectId
         * @example 5fdedb7c25ab1352eef88f60
         */
        entryId: string;
      };
    };
    /** StoredEventResponse */
    StoredEventResponse: {
      /**
       * @description ObjectId
       * @example 5fdedb7c25ab1352eef88f60
       */
      _id: string;
      /** Format: date-time */
      createdAt: string;
      /** @description TODO: Constraint to possible events enum */
      type: string;
      payload: unknown;
      nodeUrl: string | null;
      status: "pending" | "accepted" | "rejected";
    };
    /**
     * PaginatedStoredEventsQuery
     * @description Paginated stored events query
     */
    PaginatedStoredEventsQuery: {
      statuses?:
        | ("pending" | "accepted" | "rejected")
        | ("pending" | "accepted" | "rejected")[];
    } & {
      /**
       * @description Page number (1 indexed)
       * @default 1
       */
      page: number;
      /**
       * @description Page size
       * @default 10
       */
      limit: number;
    };
    /**
     * PaginatedStoredEventsResponse
     * @description Paginated stored events response
     */
    PaginatedStoredEventsResponse: {
      events: components["schemas"]["StoredEventResponse"][];
      /** @description Total number of stored events */
      total: number;
    };
    /** ChangeStoredEventStatusRequest */
    ChangeStoredEventStatusRequest: {
      status: "pending" | "accepted" | "rejected";
    };
    /** LoginRequestSchema */
    LoginRequestSchema: {
      /** @description User handle. Example: @example.bsky.social */
      handle: string;
    };
    /** CreatePeerNodeRequest */
    CreatePeerNodeRequest: {
      url: string;
      trustLevel: "trusted" | "semi-trusted";
    };
    /** UpdatePeerNodeRequest */
    UpdatePeerNodeRequest: {
      trustLevel: "trusted" | "semi-trusted";
    };
    /** PeerNodeResponse */
    PeerNodeResponse: {
      /**
       * @description ObjectId
       * @example 5fdedb7c25ab1352eef88f60
       */
      _id: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: uri */
      url: string;
      trustLevel: "trusted" | "semi-trusted";
      pinnedCertificates: {
        /**
         * @description ObjectId
         * @example 5fdedb7c25ab1352eef88f60
         */
        _id: string;
        /** Format: date-time */
        createdAt: string;
        sha256: string;
      }[];
    };
    /** PeerNodeListResponse */
    PeerNodeListResponse: components["schemas"]["PeerNodeResponse"][];
    /** ProfileResponse */
    ProfileResponse: {
      did: string;
      role: "owner" | "admin" | "user";
      handle?: string;
      displayName?: string;
      description?: string;
      /** Format: uri */
      avatarUrl?: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
